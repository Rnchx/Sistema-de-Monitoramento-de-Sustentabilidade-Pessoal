from datetime import datetime
import mysql.connector

print("Programa para monitoramento de sustentabilidade pessoal")

# Conex√£o com o banco de dados MySQL
conn = mysql.connector.connect(
    host="localhost",
    user="root",
    password="6807",
    database="sustentabilidade"
)
cursor = conn.cursor()

# Nomoe do usu√°rio
usuario = input("Digite seu nome: ").strip()

# Validar a data
while True:
    todayDate = input("Qual a data de hoje? (formato DD/MM/AAAA) ")
    try:
        todayDate = todayDate.strip()
        formatedDate = datetime.strptime(todayDate, "%d/%m/%Y").date()
        if formatedDate != datetime.today().date():
            print("Erro: A data informada n√£o corresponde √† data atual!")
        else:
            break
    except ValueError:
        print("Formato de data inv√°lido! Use DD/MM/AAAA.")

# Validar consumo de √°gua
while True:
    try:
        AmountOfWaterConsumed = float(input("Quantos litros de √°gua voc√™ consumiu hoje? "))
        if AmountOfWaterConsumed < 0:
            print("O consumo de √°gua n√£o pode ser negativo!")
            continue

        if AmountOfWaterConsumed > 3000:
            print("Digite um valor que seja coerente/verdadeiro de consumo de √°gua!")
            continue

        if AmountOfWaterConsumed < 150:
            waterConsumption = 'üü¢ Alta sustentabilidade'
        elif AmountOfWaterConsumed <= 200:
            waterConsumption = 'üü° Moderada sustentabilidade'
        else:
            waterConsumption = 'üî¥ Baixa sustentabilidade'

        print(f"Classifica√ß√£o do consumo de √°gua: {waterConsumption}")
        break
    except ValueError:
        print("Digite apenas n√∫meros!")

# Validar consumo de energia
while True:
    try:
        AmountOfEnergyConsumed = float(input("Quantos kWh de energia el√©trica voc√™ consumiu hoje? "))
        if AmountOfEnergyConsumed < 0:
            print("Erro: O consumo de energia n√£o pode ser negativo!")
            continue

        if AmountOfEnergyConsumed < 5:
            energyConsumption = 'üü¢ Alta sustentabilidade'
        elif AmountOfEnergyConsumed <= 10:
            energyConsumption = 'üü° Moderada sustentabilidade'
        else:
            energyConsumption = 'üî¥ Baixa sustentabilidade'

        print(f"Classifica√ß√£o do consumo de energia: {energyConsumption}")
        break
    except ValueError:
        print("Digite apenas n√∫meros!")

# Validar res√≠duos n√£o recicl√°veis
while True:
    try:
        AmountOfNonRecyclabeWasteGenerated = float(input("Quantos kg de res√≠duos n√£o recicl√°veis voc√™ gerou hoje? "))
        if AmountOfNonRecyclabeWasteGenerated < 0:
            print("Erro: O peso dos res√≠duos n√£o pode ser negativo!")
            continue
        break
    except ValueError:
        print("Digite apenas n√∫meros!")

# Validar porcentagem reciclada
while True:
    try:
        percentageOfRecycledWasteInTotal = float(input("Qual a porcentagem de res√≠duos reciclados no total? "))
        if percentageOfRecycledWasteInTotal < 0 or percentageOfRecycledWasteInTotal > 100:
            print("Erro: A porcentagem deve estar entre 0 e 100.")
            continue

        if percentageOfRecycledWasteInTotal > 50:
            wasteClassification = 'üü¢ Alta sustentabilidade'
        elif percentageOfRecycledWasteInTotal >= 20:
            wasteClassification = 'üü° Moderada sustentabilidade'
        else:
            wasteClassification = 'üî¥ Baixa sustentabilidade'

        print(f"Classifica√ß√£o da reciclagem: {wasteClassification}")
        break
    except ValueError:
        print("Digite apenas n√∫meros!")

# Escolha do meio de transporte
print("""
Qual o meio de transporte voc√™ usou hoje?
1. Transporte p√∫blico (√¥nibus, metr√¥, trem)
2. Bicicleta
3. Caminhada
4. Carro (combust√≠vel f√≥ssil)
5. Carro el√©trico
6. Carona compartilhada
""")

while True:
    try:
        transportOption = int(input("Escolha uma op√ß√£o (1-6): "))
        if transportOption not in range(1, 7):
            print("Digite uma op√ß√£o v√°lida de 1 a 6.")
            continue

        if transportOption in [2, 3]:
            transportClassification = 'üü¢ Alta sustentabilidade'
        elif transportOption in [5, 6]:
            transportClassification = 'üü° Moderada sustentabilidade'
        else:
            transportClassification = 'üî¥ Baixa sustentabilidade'

        transportOptionsDict = {
            1: "Transporte p√∫blico",
            2: "Bicicleta",
            3: "Caminhada",
            4: "Carro (combust√≠vel f√≥ssil)",
            5: "Carro el√©trico",
            6: "Carona compartilhada"
        }
        transporte = transportOptionsDict[transportOption]

        print(f"Classifica√ß√£o do transporte: {transportClassification}")
        break
    except ValueError:
        print("Digite apenas n√∫meros!")

# Mostrar resumo final
print(f"""
Quadro de monitoramento de sustentabilidade pessoal:

1. Seu consumo de √°gua est√° em {waterConsumption}
2. Seu consumo de energia est√° em {energyConsumption}
3. Sua reciclagem est√° classificada como {wasteClassification}
4. O transporte que voc√™ utilizou hoje est√° classificado como {transportClassification}
""")

# Inserir dados no banco de dados
insert_query = """
INSERT INTO sustentabilidade_pessoal (
    data_registro,
    usuario,
    consumo_agua,
    consumo_energia,
    residuos_nao_reciclaveis,
    percentual_reciclados,
    transporte
) VALUES (%s, %s, %s, %s, %s, %s, %s)
"""

data = (
    formatedDate,
    usuario,
    AmountOfWaterConsumed,
    AmountOfEnergyConsumed,
    AmountOfNonRecyclabeWasteGenerated,
    percentageOfRecycledWasteInTotal,
    transporte
)

cursor.execute(insert_query, data)
conn.commit()

print("‚úÖ Dados inseridos com sucesso no banco de dados!")

# Fechar conex√£o
cursor.close()
conn.close()
